name: chocolatine

on: 
  push:
    branches-ignore:
    - "ga-ignore-*"
  pull_request:
    branches-ignore:
    - "ga-ignore-*"

env:
  MIRROR_URL: "git@github.com:EpitechPromo2028/B-DOP-200-MPL-2-1-chocolatine-loris.raimbault.git"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  EXECUTABLES: "test"

jobs:
  check_coding_style:
    name: "Use coding_style_checker"
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v4
      - id: check_coding_style
        run: |
          check.sh $(pwd) $(pwd)
          while IFS= read -r ERRORS
          do
            array=(`echo $ERRORS | sed 's/:/\n/g'`)
            echo "::error file=${array[1]#./},line=${array[2]#./},col=0::${array[3]#./}"
          done < "$(pwd)/coding-style-reports.log"
          if [[ -s $(pwd)/coding-style-reports.log ]]
          then
            exit 1
          else
            echo No coding style errors detected
          fi
  
  check_repo:
    name: "Checks if the repository is clean"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: check_repo
        run: |
          UNWANTED_FILES=$(find . -type f -not -path "./git/*" -wholename "*tmp/*" -or -name "*~" -or -name "*.o" -or -name "*.so" -or -name "*.gcno" -or -name "*.gcda" -or -name "*#" -or -name "#*" -or -name "*.gcov" -or -name "*pain_au_chocolat*")
          for FILES in $UNWANTED_FILES; do
            echo "::error file=${FILES#./},title=Unwanted file detected::${FILES#./}"
          done
          if [[ -n $UNWANTED_FILES ]]
          then
            exit 1
          else
            echo No unwanted files detected
          fi

  check_program_compilation:
    needs: [check_repo]
    name: "Checks if make compil"
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest

    steps:
      - uses: actions/checkout@v4
      - id: check_program_compilation
        run: make
        timeout-minutes: 2
      - run: make clean
      - run: |
          OIFS=$IFS
          IFS=','
          for x in $EXECUTABLES
            do
              ./$x $ARGUMENTS
            done
          IFS=$OIFS
  check_merge:
    needs: [check_program_compilation]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check if merge commit
        run: |
          if git log --merges -n 1 --pretty="%H" | grep -q "${{ github.sha }}"; then
            echo "This is a merge commit."
          else
            echo "This is not a merge commit."
          fi

  run_tests:
    needs: [check_program_compilation]
    name: "Runs tests with criterion"
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest

    steps:
      - uses: actions/checkout@v4
      - id: run_tests
        run: make tests_run
        timeout-minutes: 2

  setup:
    runs-on: ubuntu-latest
    outputs:
      ignore: ${{ steps.set_ignore.outputs.ignore }}
    steps:
      - id: set_ignore
        run: echo "::set-output name=ignore::${{ contains(secrets.IGNORE_REPOS, github.repository ) }}"
        timeout-minutes: 2


  push_to_mirror:
    needs: [run_tests, setup, check_coding_style]
    if: ${{ github.event_name == 'push' && github.actor != 'github-actions[bot]' && needs.setup.outputs.ignore != 'false' }}
    name: "Push all files to mirror specified"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.SSH_KEY }}
  generate:
    needs: [setup]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Check if file or directory exists
        id: check_file
        run: |
          if [[ -e "dist/" ]]; then
            echo "::set-output name=skip::true"
          else
            echo "::set-output name=skip::false"
          fi

      - name: Generate github-contribution-grid-snake.svg
        if: steps.check_file.outputs.skip == 'false'
        uses: Platane/snk@v3
        with:
          github_user_name: ${{ github.repository_owner }}
          build_dir: dist
          outputs: |
            dist/github-snake.svg
            dist/github-snake-dark.svg?palette=github-dark
            dist/ocean.gif?color_snake=orange&color_dots=#bfd6f6,#8dbdff,#64a1f4,#4b91f1,#3c7dd9

      - name: Update README
        if: steps.check_file.outputs.skip == 'false'
        run: |
          echo -e "# My contribution snake\n" > README.md
          echo -e "\n![Ocean GIF](dist/github-snake-dark.svg)" >> README.md

      - name: Commit and push
        if: steps.check_file.outputs.skip == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull origin main
          git add dist/* README.md
          git commit -m "Add generated snake graph"
          git push

